# coding: utf-8

"""
    Traffic data concentrator - OpenAPI 3.0

    This is a development Swagger-supported server based on the OpenAPI 3.0 specification. You can find out more about Swagger at  [https://swagger.io](https://swagger.io).  # noqa: E501

    OpenAPI spec version: 0.9.4
    Contact: d3e@fd.cvut.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lineid': 'str',
        'vehicles': 'GolemiolastDataVehicles'
    }

    attribute_map = {
        'lineid': 'lineid',
        'vehicles': 'vehicles'
    }

    def __init__(self, lineid=None, vehicles=None):  # noqa: E501
        """InlineResponse2004 - a model defined in Swagger"""  # noqa: E501
        self._lineid = None
        self._vehicles = None
        self.discriminator = None
        self.lineid = lineid
        if vehicles is not None:
            self.vehicles = vehicles

    @property
    def lineid(self):
        """Gets the lineid of this InlineResponse2004.  # noqa: E501

        Identifier of a PT line (numeric / alphanumeric).  # noqa: E501

        :return: The lineid of this InlineResponse2004.  # noqa: E501
        :rtype: str
        """
        return self._lineid

    @lineid.setter
    def lineid(self, lineid):
        """Sets the lineid of this InlineResponse2004.

        Identifier of a PT line (numeric / alphanumeric).  # noqa: E501

        :param lineid: The lineid of this InlineResponse2004.  # noqa: E501
        :type: str
        """
        if lineid is None:
            raise ValueError("Invalid value for `lineid`, must not be `None`")  # noqa: E501

        self._lineid = lineid

    @property
    def vehicles(self):
        """Gets the vehicles of this InlineResponse2004.  # noqa: E501


        :return: The vehicles of this InlineResponse2004.  # noqa: E501
        :rtype: GolemiolastDataVehicles
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this InlineResponse2004.


        :param vehicles: The vehicles of this InlineResponse2004.  # noqa: E501
        :type: GolemiolastDataVehicles
        """

        self._vehicles = vehicles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
