# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.scalalast_data_data import ScalalastDataData  # noqa: F401,E501
from swagger_server import util


class ScalalastDataDetectors(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, _class: str=None, data: ScalalastDataData=None):  # noqa: E501
        """ScalalastDataDetectors - a model defined in Swagger

        :param id: The id of this ScalalastDataDetectors.  # noqa: E501
        :type id: str
        :param _class: The _class of this ScalalastDataDetectors.  # noqa: E501
        :type _class: str
        :param data: The data of this ScalalastDataDetectors.  # noqa: E501
        :type data: ScalalastDataData
        """
        self.swagger_types = {
            'id': str,
            '_class': str,
            'data': ScalalastDataData
        }

        self.attribute_map = {
            'id': 'id',
            '_class': 'class',
            'data': 'data'
        }
        self._id = id
        self.__class = _class
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'ScalalastDataDetectors':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The scalalastData_detectors of this ScalalastDataDetectors.  # noqa: E501
        :rtype: ScalalastDataDetectors
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ScalalastDataDetectors.

        Detector ID, contains both numeric ID from SCALA and traffic engineering ID from intersection plans, separated by '_'  # noqa: E501

        :return: The id of this ScalalastDataDetectors.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScalalastDataDetectors.

        Detector ID, contains both numeric ID from SCALA and traffic engineering ID from intersection plans, separated by '_'  # noqa: E501

        :param id: The id of this ScalalastDataDetectors.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _class(self) -> str:
        """Gets the _class of this ScalalastDataDetectors.

        Detector class  # noqa: E501

        :return: The _class of this ScalalastDataDetectors.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this ScalalastDataDetectors.

        Detector class  # noqa: E501

        :param _class: The _class of this ScalalastDataDetectors.
        :type _class: str
        """
        allowed_values = ["ig", "area"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def data(self) -> ScalalastDataData:
        """Gets the data of this ScalalastDataDetectors.


        :return: The data of this ScalalastDataDetectors.
        :rtype: ScalalastDataData
        """
        return self._data

    @data.setter
    def data(self, data: ScalalastDataData):
        """Sets the data of this ScalalastDataDetectors.


        :param data: The data of this ScalalastDataDetectors.
        :type data: ScalalastDataData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data
